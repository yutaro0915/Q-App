// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Faculty {
  文学部
  教育学部
  法学部
  経済学部
  理学部
  医学部
  歯学部
  薬学部
  工学部
  芸術工学部
  農学部
  共創学部
}

enum PostCategory {
  授業
  アルバイト
  サークル
  雑談
}

model User {
  userId         Int      @id @default(autoincrement()) @map("user_id")
  username       String   @unique @db.VarChar(50)
  email          String   @unique @db.VarChar(100)
  passwordHash   String   @map("password_hash") @db.VarChar(255)
  displayName    String   @map("display_name") @db.VarChar(100)
  faculty        Faculty
  grade          Int      @db.TinyInt
  circle         String?  @db.VarChar(100)
  emailVerified  Boolean  @default(false) @map("email_verified")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  posts       Post[]
  threads     Thread[]
  postLikes   PostLike[]
  threadLikes ThreadLike[]
  events      Event[]

  @@index([username])
  @@index([email])
  @@index([faculty])
  @@map("users")
}

model Post {
  postId       Int          @id @default(autoincrement()) @map("post_id")
  userId       Int          @map("user_id")
  category     PostCategory
  content      String       @db.Text
  imageUrl     String?      @map("image_url") @db.VarChar(500)
  likeCount    Int          @default(0) @map("like_count")
  threadCount  Int          @default(0) @map("thread_count")
  isAnonymous  Boolean      @default(false) @map("is_anonymous")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  threads     Thread[]
  postLikes   PostLike[]

  @@index([category])
  @@index([createdAt])
  @@index([userId])
  @@index([category, createdAt])
  @@map("posts")
}

model Thread {
  threadId       Int      @id @default(autoincrement()) @map("thread_id")
  postId         Int      @map("post_id")
  parentThreadId Int?     @map("parent_thread_id")
  userId         Int      @map("user_id")
  content        String   @db.Text
  likeCount      Int      @default(0) @map("like_count")
  depthLevel     Int      @default(0) @map("depth_level")
  isAnonymous    Boolean  @default(false) @map("is_anonymous")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  post         Post         @relation(fields: [postId], references: [postId], onDelete: Cascade)
  parentThread Thread?      @relation("ThreadChildren", fields: [parentThreadId], references: [threadId], onDelete: Cascade)
  children     Thread[]     @relation("ThreadChildren")
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  threadLikes  ThreadLike[]

  @@index([postId])
  @@index([parentThreadId])
  @@index([createdAt])
  @@index([postId, parentThreadId])
  @@map("threads")
}

model PostLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([postId, userId], name: "unique_post_like")
  @@map("post_likes")
}

model ThreadLike {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  threadId  Int      @map("thread_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  thread Thread @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([threadId, userId], name: "unique_thread_like")
  @@map("thread_likes")
}

model Event {
  eventId       Int      @id @default(autoincrement()) @map("event_id")
  userId        Int      @map("user_id")
  title         String   @db.VarChar(200)
  description   String?  @db.Text
  category      String   @db.VarChar(50)
  eventDatetime DateTime @map("event_datetime")
  location      String?  @db.VarChar(200)
  externalUrl   String?  @map("external_url") @db.VarChar(500)
  imageUrl      String?  @map("image_url") @db.VarChar(500)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([category])
  @@index([eventDatetime])
  @@index([createdAt])
  @@index([category, eventDatetime])
  @@map("events")
}

model EmailVerification {
  verificationId   Int      @id @default(autoincrement()) @map("verification_id")
  email            String   @db.VarChar(100)
  verificationCode String   @map("verification_code") @db.VarChar(6)
  expiresAt        DateTime @map("expires_at")
  isUsed           Boolean  @default(false) @map("is_used")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([expiresAt])
  @@map("email_verifications")
}